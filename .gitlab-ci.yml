stages:
  - build
  - documentation
  - deploy

variables:
  MORYX_BUILDNUMBER: "$CI_PIPELINE_ID"

build:
  tags:
    - angular
    - marvin01    
  stage: build
  artifacts:
    expire_in: 1 hrs
    paths:
      - 'dist'
  script:
    - >
      npm install;

      cd "./projects";
      foreach($projectDirectory in Get-ChildItem -Name) {
        Write-Host "Building $projectDirectory..." -ForegroundColor Green;
        cd $projectDirectory;
        npm run build;
        if ($LASTEXITCODE) {
          exit 1;
        }
        
        npm run build
        cd ..;
        
        if ($LASTEXITCODE) {
          exit 1;
        }
      }


publish:
  tags:
    - angular 
    - publishing
    - proget
  stage: deploy

  rules:
    - if: $CI_COMMIT_REF_NAME =~ /dev/
      variables:
        MORYX_PACKAGE_TARGET: "https://packages-ctvc.europe.phoenixcontact.com/npm/moryx-ci-npm/"
    - if: $CI_COMMIT_REF_NAME =~ /future/
      variables:
        MORYX_PACKAGE_TARGET: "https://packages-ctvc.europe.phoenixcontact.com/npm/moryx-future-npm/"
    - if: $CI_COMMIT_REF_NAME =~ /v[0-9]+.[0-9]+.[0-9]+/
      variables:
        MORYX_PACKAGE_TARGET: "https://packages-ctvc.europe.phoenixcontact.com/npm/moryx-npm/"

  script:
    - npm config set strict-ssl false
    - >
      cd "./dist";
      foreach($projectDirectory in Get-ChildItem -Name) {
        if(!(Test-Path "./$projectDirectory/package.json" -PathType Leaf)) {
          continue
        }
        Write-Host "Publish $projectDirectory"

        cd $projectDirectory;
        if ($CI_COMMIT_REF_NAME.Contains('dev')){
          & npm version prerelease --preid=$env:MORYX_BUILDNUMBER;
          Write-Host "Updated version for prerelease package."
        }
        if ($CI_COMMIT_REF_NAME.Contains('future')){
          & npm version prerelease --preid=$env:MORYX_BUILDNUMBER;
          Write-Host "Updated version for prerelease package."
        }
        if ($CI_COMMIT_REF_NAME -match "v[0-9]+.[0-9]+.[0-9]+") {
          & npm version from-git --no-git-tag-version;
          Write-Host "Updated version for release package."
        }
        
        $NPM_PACKAGE_NAME=(node -p "require('./package.json').name");
        $NPM_PACKAGE_VERSION=(node -p "require('./package.json').version");
        
        Write-Host "running npm view $NPM_PACKAGE_NAME versions --registry $env:MORYX_PACKAGE_TARGET";
        $existingVersions = & npm view $NPM_PACKAGE_NAME versions --registry $env:MORYX_PACKAGE_TARGET;
        if ($existingVersions.Contains($NPM_PACKAGE_VERSION)){
          Write-Warning "Version $NPM_PACKAGE_VERSION of $NPM_PACKAGE_NAME has already been published, so no new version has been published.";
          cd ..;
          continue;
        }
        
        Write-Host "Publishing $projectDirectory to $env:MORYX_PACKAGE_TARGET..." -ForegroundColor Green;
        npm publish --registry $env:MORYX_PACKAGE_TARGET;
        cd ..;

        if ($LASTEXITCODE) {
          exit 1;
        }
      }
    - npm config set strict-ssl true

CountManualTests:
  stage: documentation
  tags:
    - powershell
    - countManualTests
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /dev/
    - if: $CI_COMMIT_REF_NAME =~ /future/
  script:
    - .\manualtests.ps1 -Count
